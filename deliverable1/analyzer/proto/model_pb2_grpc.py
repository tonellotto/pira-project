# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import model_pb2 as proto_dot_model__pb2


class AnalyzerEntityStub(object):
    """define the analyzer service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendFileToAnalyze = channel.stream_unary(
                '/AnalyzerEntity/sendFileToAnalyze',
                request_serializer=proto_dot_model__pb2.DataFile.SerializeToString,
                response_deserializer=proto_dot_model__pb2.Ack.FromString,
                )
        self.sendEngineOptions = channel.unary_unary(
                '/AnalyzerEntity/sendEngineOptions',
                request_serializer=proto_dot_model__pb2.AnalyzerEngineOptions.SerializeToString,
                response_deserializer=proto_dot_model__pb2.Ack.FromString,
                )
        self.sendOptions = channel.unary_unary(
                '/AnalyzerEntity/sendOptions',
                request_serializer=proto_dot_model__pb2.AnalyzeOptions.SerializeToString,
                response_deserializer=proto_dot_model__pb2.Ack.FromString,
                )
        self.getAnalyzerResults = channel.unary_stream(
                '/AnalyzerEntity/getAnalyzerResults',
                request_serializer=proto_dot_model__pb2.Request.SerializeToString,
                response_deserializer=proto_dot_model__pb2.AnalyzerResults.FromString,
                )


class AnalyzerEntityServicer(object):
    """define the analyzer service
    """

    def sendFileToAnalyze(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendEngineOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAnalyzerResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyzerEntityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendFileToAnalyze': grpc.stream_unary_rpc_method_handler(
                    servicer.sendFileToAnalyze,
                    request_deserializer=proto_dot_model__pb2.DataFile.FromString,
                    response_serializer=proto_dot_model__pb2.Ack.SerializeToString,
            ),
            'sendEngineOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.sendEngineOptions,
                    request_deserializer=proto_dot_model__pb2.AnalyzerEngineOptions.FromString,
                    response_serializer=proto_dot_model__pb2.Ack.SerializeToString,
            ),
            'sendOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.sendOptions,
                    request_deserializer=proto_dot_model__pb2.AnalyzeOptions.FromString,
                    response_serializer=proto_dot_model__pb2.Ack.SerializeToString,
            ),
            'getAnalyzerResults': grpc.unary_stream_rpc_method_handler(
                    servicer.getAnalyzerResults,
                    request_deserializer=proto_dot_model__pb2.Request.FromString,
                    response_serializer=proto_dot_model__pb2.AnalyzerResults.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AnalyzerEntity', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalyzerEntity(object):
    """define the analyzer service
    """

    @staticmethod
    def sendFileToAnalyze(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/AnalyzerEntity/sendFileToAnalyze',
            proto_dot_model__pb2.DataFile.SerializeToString,
            proto_dot_model__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendEngineOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AnalyzerEntity/sendEngineOptions',
            proto_dot_model__pb2.AnalyzerEngineOptions.SerializeToString,
            proto_dot_model__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AnalyzerEntity/sendOptions',
            proto_dot_model__pb2.AnalyzeOptions.SerializeToString,
            proto_dot_model__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAnalyzerResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AnalyzerEntity/getAnalyzerResults',
            proto_dot_model__pb2.Request.SerializeToString,
            proto_dot_model__pb2.AnalyzerResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
